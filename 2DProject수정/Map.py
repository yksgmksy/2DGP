__author__ = 'yang'
from pico2d import *
from Item import *
from Inventory import *
import random
import copy

class MapLayer:
    def __init__(self):
        self.imagebg3 = load_image('res/background13.png')
        self.imagebg2 = load_image('res/background6.png')
        self.imagebg = load_image('res/background5.png')
        #self.imagebg2 = load_image('background2.png')
        self.mapState = 1
        self.x = 512
        self.y = 300
        self.x2 = 512
        self.y2 = 265

    def changeMap(self, state):
        self.mapState = state
        if state == 1:
            self.imagebg3 = load_image('res/background13.png')
            self.imagebg2 = load_image('res/background6.png')
            self.imagebg = load_image('res/background5.png')
            self.x = 512
            self.y = 300
            self.x2 = 512
            self.y2 = 265
        if state == 2:
            self.imagebg3 = load_image('res/background13.png')
            self.imagebg2 = load_image('res/background11.png')
            self.imagebg = load_image('res/background10.png')
            self.x = 512
            self.y = 270
            self.x2 = 512
            self.y2 = 265

    def update(self):
        pass


    def draw(self):
        self.imagebg.opacify(1)
        if self.mapState == 1:
            self.imagebg3.draw(400,300)
            self.imagebg.draw(self.x, self.y)
            self.imagebg2.draw(self.x2,self.y2)
            self.imagebg2.draw(self.x2+1024,self.y2)
        elif self.mapState == 2:
            self.imagebg3.draw(400,300)
            self.imagebg.draw(self.x, self.y)
            self.imagebg.draw(self.x, self.y+300)
            self.imagebg2.draw(self.x2,self.y2)
            self.imagebg2.draw(self.x2+1024,self.y2)
        pass

class Map:

    def __init__(self):
        global  font
        self.image = load_image('res/background4.png')
        self.image2 = load_image('res/interface2.png')
        self.mapState = 1
        self.x = 450*2
        self.y = 350
        self.opacify = 0.2
        self.herohp = 0
        self.firstTime = get_time()
        self.maxtime = 70
        self.currentTime = 0
        self.night = False
        self.change = False
        font = load_font('ENCR10B.TTF')

    def changeMap(self, state, mapX, mapY):
        self.mapState = state
        self.x = mapX
        self.y = mapY

    def update(self):
        self.currentTime = (get_time()-self.firstTime)+1

        #print(self.maxtime - self.currentTime , self.currentTime)
        if self.maxtime - self.currentTime < 0.0:
            if self.night:
                self.night = False
            else:
                self.night = True
            self.firstTime = get_time()
            self.maxtime = 70
            self.change = True
        if self.night == True:
            if self.opacify < 0.6:
                self.opacify += 0.01
        elif self.night == False:
            if self.opacify >= 0:
                self.opacify -= 0.01

    def get_hero_hp(self,hp):
        self.herohp = hp

    def draw(self):

        self.image.opacify(self.opacify)
        self.image.draw(400,300)
        #self.image2.opacify(0.1)
        #self.image2.draw(750,530)
        #font.draw(650, 575,'H  P:%3.0f' % self.herohp)
        font.draw(670, 550,'H  P:%3.0f' % self.herohp)
        font.draw(670, 525,'Time:%3.0f' % (self.maxtime - self.currentTime) )
        if self.night == True:
            font.draw(670, 500,'  Moon')
        else:
            font.draw(670, 500,'   Sun')

class TileBackground:
    image0 = None
    image1 = None
    image2 = None
    image20 = None
    image21 = None
    image22 = None
    image23 = None
    image24 = None
    image30 = None
    image31 = None
    image32 = None
    image33 = None
    image40 = None
    image41 = None
    image42 = None

    EMPTY = 10
    MUD1, MUD2, MUD3, MUD4, MUD5 = 20, 21, 22, 23, 24
    TREE1, TREE2, TREE3 = 40,41,42
    MUD_HP, TREE_HP = 2, 10
    RED , BLUE , YELLOW , PINK , STONE, METAL, SLIVER , GOLD ,WOOD, DIA  = 0, 1, 2, 3, 4, 5, 6, 7, 8, 9
    WEAPON , NOT_WEAPON = 0, 1

    def __init__(self):
        global items , inventory
        items = [Item(0,0,0) for i in range(0)]
        inventory = Inventory()
        self.inventory = inventory
        if TileBackground.image0 == None:
            self.image0 = load_image('res/brack_tile.png')
        if TileBackground.image1 == None:
            self.image1 = load_image('res/tile1.png')
        if TileBackground.image2 == None:
            self.image2 = load_image('res/tile2.png')
        if TileBackground.image20 == None:
            self.image20 = load_image('res/mud_tile5.png')
        if TileBackground.image21 == None:
            self.image21 = load_image('res/mud_tile1.png')
        if TileBackground.image22 == None:
            self.image22 = load_image('res/mud_tile2.png')
        if TileBackground.image23 == None:
            self.image23 = load_image('res/mud_tile3.png')
        if TileBackground.image24 == None:
            self.image24 = load_image('res/mud_tile4.png')
        if TileBackground.image30 == None:
            self.image30 = load_image('res/water_tile1.png')
        if TileBackground.image31 == None:
            self.image31 = load_image('res/water_tile2.png')
        if TileBackground.image32 == None:
            self.image32 = load_image('res/water_tile3.png')
        if TileBackground.image33 == None:
            self.image33 = load_image('res/water_tile4.png')
        if TileBackground.image40 == None:
            self.image40 = load_image('res/tree_tile1.png')
        if TileBackground.image41 == None:
            self.image41 = load_image('res/tree_tile2.png')
        if TileBackground.image42 == None:
            self.image42 = load_image('res/tree_tile3.png')

        self.map_01 =[
         [21, 23, 20, 21, 23, 20, 21, 23, 20, 21, 23, 20, 20, 23, 23, 23, 22, 22, 20, 21, 23, 20, 21, 23, 20, 21, 23, 20, 21, 23, 20, 22, 23, 21, 20, 23, 23, 20, 21, 22, 21, 23, 20, 21, 22, 21, 23, 20, 21, 22, 21, 23, 20, 21, 22, 21, 23, 20, 21, 22, 21, 23, 20, 21, 22, 21, 23, 20, 21, 22, 21, 22],
         [22, 23, 21, 22, 23, 21, 22, 23, 21, 21, 21, 20, 21, 20, 21, 21, 22, 23, 21, 23, 20, 21, 23, 20, 21, 23, 20, 21, 23, 20, 22, 21, 23, 22, 21, 23, 23, 23, 20, 21, 22, 21, 23, 20, 21, 22, 21, 23, 20, 21, 22, 21, 22, 22, 23, 20, 21, 22, 21, 23, 20, 21, 22, 21, 23, 20, 21, 22, 21, 21, 22, 23],
         [21, 21, 22, 24, 24, 24, 24, 24, 22, 23, 21, 22, 21, 22, 23, 22, 24, 24, 24, 24, 24, 21, 23, 20, 21, 23, 20, 21, 23, 20, 21, 23, 20, 21, 22, 21, 23, 22, 24, 24, 24, 24, 24, 24, 23, 20, 21, 22, 21, 22, 23, 22, 24, 24, 23, 20, 21, 22, 21, 23, 20, 21, 22, 21, 23, 20, 21, 22, 21, 22, 23, 23],
         [24, 24, 24, 10, 10, 10, 10, 10, 24, 24, 24, 24, 24, 24, 24, 24, 10, 10, 10, 10, 10, 24, 24, 21, 23, 20, 21, 23, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 10, 10, 10, 10, 10, 10, 24, 24, 24, 24, 24, 24, 24, 24, 10, 10, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24],
         [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 24, 24, 24, 24, 24, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 30, 30, 30, 30, 30],
         [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 30, 30, 30, 30, 30],
         [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 30, 30, 30, 30, 30],
         [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 30, 30, 30, 30, 30],
         [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 24, 24, 24, 24, 24],
         [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10],
         [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10],
         [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10],
         [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10],
         [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10],
         [22, 21, 20, 23, 23, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10],
         [24, 24, 24, 24, 24, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10],
         [10, 10, 40, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10],
         [10, 10, 40, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10],
         [10, 42, 40, 41, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10],
         [10, 41, 41, 42, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10],
         [10, 41, 41, 42, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10],
         [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10],
         [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10],
         [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10]]

        self.map_02 =[
         [21, 23, 20, 21, 23, 20, 21, 23, 20, 21, 23, 20, 20, 23, 23, 23, 22, 22, 20, 21, 23, 20, 21, 23, 20, 21, 23, 20, 21, 23, 20, 22, 23, 21, 20, 23, 23, 20, 21, 22, 21, 23, 20, 21, 22, 21, 23, 20, 21, 22, 21, 23, 20, 21, 22, 21, 23, 20, 21, 22, 21, 23, 20, 21, 22, 21, 23, 20, 21, 22, 21, 22],
         [22, 23, 21, 22, 23, 21, 22, 23, 21, 21, 21, 20, 21, 20, 21, 21, 22, 23, 21, 23, 20, 21, 23, 20, 21, 23, 20, 21, 23, 20, 22, 21, 23, 22, 21, 23, 23, 23, 20, 21, 22, 21, 23, 20, 21, 22, 21, 23, 20, 21, 22, 21, 22, 22, 23, 20, 21, 22, 21, 23, 20, 21, 22, 21, 23, 20, 21, 22, 21, 21, 22, 23],
         [21, 21, 24, 24, 24, 24, 24, 24, 22, 23, 21, 22, 21, 22, 23, 22, 24, 24, 24, 24, 24, 21, 23, 20, 21, 23, 20, 21, 23, 20, 21, 23, 20, 21, 22, 21, 23, 22, 24, 24, 24, 24, 24, 24, 23, 20, 21, 22, 21, 22, 23, 22, 24, 24, 23, 20, 21, 22, 21, 23, 20, 21, 22, 21, 23, 20, 21, 22, 21, 22, 23, 23],
         [24, 24, 10, 10, 10, 10, 10, 10, 24, 24, 24, 24, 24, 24, 24, 24, 10, 10, 10, 10, 10, 24, 24, 21, 23, 20, 21, 23, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 10, 10, 10, 10, 10, 10, 24, 24, 24, 24, 24, 24, 24, 24, 10, 10, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24],
         [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 40, 10, 10, 10, 40, 10, 10, 10, 10, 10, 10, 10, 24, 24, 24, 24, 24, 24, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10],
         [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 40, 10, 10, 10, 40, 10, 10, 10, 10, 10, 10, 10, 10, 22, 24, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10],
         [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 40, 10, 10, 10, 40, 10, 10, 10, 10, 10, 10, 10, 10, 10, 21, 21, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10],
         [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 40, 10, 10, 10, 40, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 21, 24, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10],
         [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 40, 10, 10, 10, 40, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 22, 24, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10],
         [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 40, 10, 10, 41, 42, 41, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 23, 24, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10],
         [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 40, 10, 41, 41, 42, 42, 41, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 23, 24, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10],
         [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 40, 10, 10, 41, 41, 42, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 24, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10],
         [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 40, 10, 10, 10, 41, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 22, 22, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10],
         [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 40, 42, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 22, 22, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10],
         [10, 10, 10, 10, 10, 10, 10, 10, 42, 42, 40, 42, 41, 41, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 22, 22, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10],
         [10, 10, 10, 10, 10, 10, 10, 10, 42, 42, 41, 41, 41, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 22, 22, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10],
         [10, 10, 10, 10, 10, 10, 10, 10, 10, 42, 42, 41, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 22, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10],
         [10, 10, 10, 10, 10, 10, 10, 10, 10, 42, 41, 41, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 22, 22, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10],
         [10, 10, 10, 10, 10, 10, 10, 10, 10, 42, 42, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 22, 22, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10],
         [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 22, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10],
         [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 22, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10],
         [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10],
         [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10],
         [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10],
         [21, 23, 20, 21, 23, 20, 21, 23, 20, 21, 23, 20, 20, 23, 23, 23, 22, 22, 20, 21, 23, 20, 21, 23, 20, 21, 23, 20, 21, 23, 20, 22, 23, 21, 20, 23, 23, 20, 21, 22, 21, 23, 20, 21, 22, 21, 23, 20, 21, 22, 21, 23, 20, 21, 22, 21, 23, 20, 21, 22, 21, 23, 20, 21, 22, 21, 23, 20, 21, 22, 21, 22],
         [22, 23, 21, 22, 23, 21, 22, 23, 21, 21, 21, 20, 21, 20, 21, 21, 22, 23, 21, 23, 20, 21, 23, 20, 21, 23, 20, 21, 23, 20, 22, 21, 23, 22, 21, 23, 23, 23, 20, 21, 22, 21, 23, 20, 21, 22, 21, 23, 20, 21, 22, 21, 22, 22, 23, 20, 21, 22, 21, 23, 20, 21, 22, 21, 23, 20, 21, 22, 21, 21, 22, 23],
         [21, 21, 24, 24, 24, 24, 24, 24, 22, 23, 21, 22, 21, 22, 23, 22, 24, 24, 24, 24, 24, 21, 23, 20, 21, 23, 20, 21, 23, 20, 21, 23, 20, 21, 22, 21, 23, 22, 24, 24, 24, 24, 24, 24, 23, 20, 21, 22, 21, 22, 23, 22, 24, 24, 23, 20, 21, 22, 21, 23, 20, 21, 22, 21, 23, 20, 21, 22, 21, 22, 23, 23],
         [24, 24, 10, 10, 10, 10, 10, 10, 24, 24, 24, 24, 24, 24, 24, 24, 10, 10, 10, 10, 10, 24, 24, 21, 23, 20, 21, 23, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 10, 10, 10, 10, 10, 10, 24, 24, 24, 24, 24, 24, 24, 24, 10, 10, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24],
         [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 24, 24, 24, 24, 24, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10],
         [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10],
         [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10],
         [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10],
         [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10],
         [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10],
         [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10],
         [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10],
         [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10],
         [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10],
         [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10],
         [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10],
         [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10],
         [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10],
         [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10],
         [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10],
         [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10],
         [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10],
         [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10],
         [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10],
         [21, 23, 20, 21, 23, 20, 21, 23, 20, 21, 23, 20, 20, 23, 23, 23, 22, 22, 20, 21, 23, 20, 21, 23, 20, 21, 23, 20, 21, 23, 20, 22, 23, 21, 20, 23, 23, 20, 21, 22, 21, 23, 20, 21, 22, 21, 23, 20, 21, 22, 21, 23, 20, 21, 22, 21, 23, 20, 21, 22, 21, 23, 20, 21, 22, 21, 23, 20, 21, 22, 21, 22],
         [22, 23, 21, 22, 23, 21, 22, 23, 21, 21, 21, 20, 21, 20, 21, 21, 22, 23, 21, 23, 20, 21, 23, 20, 21, 23, 20, 21, 23, 20, 22, 21, 23, 22, 21, 23, 23, 23, 20, 21, 22, 21, 23, 20, 21, 22, 21, 23, 20, 21, 22, 21, 22, 22, 23, 20, 21, 22, 21, 23, 20, 21, 22, 21, 23, 20, 21, 22, 21, 21, 22, 23],
         [21, 21, 24, 24, 24, 24, 24, 24, 22, 23, 21, 22, 21, 22, 23, 22, 24, 24, 24, 24, 24, 21, 23, 20, 21, 23, 20, 21, 23, 20, 21, 23, 20, 21, 22, 21, 23, 22, 24, 24, 24, 24, 24, 24, 23, 20, 21, 22, 21, 22, 23, 22, 24, 24, 23, 20, 21, 22, 21, 23, 20, 21, 22, 21, 23, 20, 21, 22, 21, 22, 23, 23],
         [24, 24, 10, 10, 10, 10, 10, 10, 24, 24, 24, 24, 24, 24, 24, 24, 10, 10, 10, 10, 10, 24, 24, 21, 23, 20, 21, 23, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 10, 10, 10, 10, 10, 10, 24, 24, 24, 24, 24, 24, 24, 24, 10, 10, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24],
         [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 24, 24, 24, 24, 24, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10],
         [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10],
         [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10],
         [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10],
         [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10],
         [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10],
         [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10],
         [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10],
         [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10],
         [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10],
         [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10],
         [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10],
         [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10],
         [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10],
         [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10],
         [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10],
         [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10],
         [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10],
         [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10],
         [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10]]

        self.distance = 0

        self.showSizeX1 = -10
        self.showSizeY1 = 0
        self.showSizeX2 = 10
        self.showSizeY2 = 24
        self.mapState = 2
        self.mapSizeY = 24
        self.hpCount = 0
        self.heroX = 0
        self.heroY = 0
        self.heroTilex = 0
        self.heroTiley = 0
        self.herostate = 0
        self.herogravity = 0
        self.mouseX = 0
        self.mouseY = 0
        self.mapX = 0
        self.mapY = 0
        self.mapstate = 1
        self.getpotal = False
        self.mapChange = self.map_01
        self.item_kind = inventory.item_kind
        self.item_num = inventory.item_num
        self.item_state = inventory.item_state

        self.tilehp_1 = [[0]*72 for i in range(72)]
        self.tilehp_2 = [[0]*72 for i in range(72)]

        self.collobjecty = False
        self.collobjectx = False
        self.x =[[0]*72 for i in range(72)]
        self.y =[[0]*72 for i in range(72)]
        for i in range((72)):
            for j in range((72)):
                self.x[i][j] = j * 25
                self.y[i][j] = i * 25
        for i in range((24)):
            for j in range((72)):
                if (int)(self.map_01[i][j] / 10) == 2:
                    self.tilehp_1[i][j] = self.MUD_HP
                if (int)(self.map_01[i][j] / 10) == 4:
                    self.tilehp_1[i][j] = self.TREE_HP
        for i in range((72)):
            for j in range((72)):
                if (int)(self.map_02[i][j] / 10) == 2:
                    self.tilehp_2[i][j] = self.MUD_HP
                if (int)(self.map_02[i][j] / 10) == 4:
                    self.tilehp_2[i][j] = self.TREE_HP

        self.info_map_02 = copy.deepcopy(self.map_02)
        self.info_map_02hp = copy.deepcopy(self.tilehp_2)

    def create_map(self):
        pass

    def collide(a,b):
        left_a,bottom_a,right_a,top_a = a.get_bb()
        left_b,bottom_b,right_b,top_b = b.get_bb()
        if left_a > right_b : return False
        if right_a < left_b : return False
        if top_a < bottom_b : return False
        if bottom_a > top_b : return False
        return True


    def changeStage(self,mapChange, mapSizeY):
        self.mapChange = mapChange
        self.mapSizeY = mapSizeY
        for i in range((72)):
            for j in range((72)):
                self.x[i][j] = j * 25
                self.y[i][j] = i * 25

    def getMapSize(self,x1,y1,mapstate):
            self.mapX = x1
            self.mapY = y1
            self.mapstate = mapstate

    def getHeroSize(self,x1, y1, mouseX, mouseY , distance ,herogravity, state ,heroTilex,heroTiley , showinventory ):
            global inventory
            self.heroX = x1
            self.heroY = y1
            self.mouseX = mouseX
            self.mouseY = mouseY
            self.distance = distance
            self.herogravity = herogravity
            self.herostate = state
            self.heroTilex = heroTilex
            self.heroTiley = heroTiley
            inventory.show = showinventory

    def showSize(self,x1,y1,x2,y2):
        self.showSizeX1 = x1
        self.showSizeY1 = y1
        self.showSizeX2 = x2
        self.showSizeY2 = y2

    def showSizeX(self,x1, x2):
        self.showSizeX1 = x1
        self.showSizeX2 = x2

    def showSizeY(self,y1 , y2):
        self.showSizeY1 = y1
        self.showSizeY2 = y2

    def removeItem(self):
        global items, inventory
        for item in items:
            if self.mapstate == 1:
                if item.x-5 < self.heroX+12.5 and item.x+5 > self.heroX-12.5 and item.y - 5 < self.heroY+12.5 and item.y + 5 > self.heroY-12.5:
                    inventory.get_item(item.itemstate,self.NOT_WEAPON)
                    items.remove(item)
            if self.mapstate == 2:
                if item.x-5 < self.heroX+12.5 and item.x+5 > self.heroX-12.5 and item.y - 5 < self.heroY+12.5 and item.y + 5 > self.heroY-12.5:
                    inventory.get_item(item.itemstate,self.NOT_WEAPON)
                    items.remove(item)
        pass

    def removeTree(self,i,j,tiletype):
        global items
        if (int)(self.mapChange[i][j] / 10) == tiletype:
            self.mapChange[i][j] = 10
            if random.randint(0, 100) % 5 == 0 :
                items.append(Item(self.x[i][j], self.y[i][j], self.WOOD))
        else: return
        if 1 < i < self.mapSizeY-1:
            self.removeTree(i+1,j,tiletype)
            self.removeTree(i-1,j,tiletype)
        if 1 < j < 71:
            self.removeTree(i,j+1,tiletype)
            self.removeTree(i,j-1,tiletype)

    def isShowTile(self,i,j):
        if 0 <= i < self.mapSizeY-1 and  0 <= j < 71:
            if (int)(self.mapChange[i][j] / 10) == 4 or (int)(self.mapChange[i][j] / 10) == 3:
                return False
            if i == 0:
                if(int)(self.mapChange[i][j] / 10) != 1 and (int)(self.mapChange[i][j-1]) != 10 and (int)(self.mapChange[i][j+1]) != 10 and (int)(self.mapChange[i+1][j]) != 10\
                        and (int)(self.mapChange[i+1][j-1]) != 10 and (int)(self.mapChange[i+1][j+1]) != 10:
                    return True
            elif (int)(self.mapChange[i][j] / 10) != 1 and (int)(self.mapChange[i][j-1]) != 10 and (int)(self.mapChange[i][j+1]) != 10 and (int)(self.mapChange[i-1][j]) != 10 and (int)(self.mapChange[i+1][j]) != 10\
                    and (int)(self.mapChange[i-1][j-1]) != 10 and (int)(self.mapChange[i+1][j-1]) != 10 and (int)(self.mapChange[i-1][j+1]) != 10 and (int)(self.mapChange[i+1][j+1]) != 10 :
                return True
            else:
                return False

    def breakblock(self,mousecheck, weapon):
        global items
        if weapon == 0:
            for i in range((self.mapSizeY)):
                for j in range((72)):
                    if (int)(self.mapChange[i][j] / 10) == 2:
                        if self.mapstate == 1:
                            if (-self.mapX+900+self.heroX)/25-1.5 < j < (-self.mapX+self.heroX+900)/25+1.5 and (self.heroY)/25-1.5 < i < (self.heroY)/25+1.5:
                                if self.mouseX - 1 < self.x[i][j]+12.5 and self.mouseX + 1 > self.x[i][j]-12.5 and self.mouseY + 1 > self.y[i][j]-12.5 and self.mouseY - 1 < self.y[i][j]+12.5:
                                    self.tilehp_1[i][j] -= 1
                                    if self.tilehp_1[i][j] <= 0:
                                        self.mapChange[i][j] = 10
                                        items.append(Item(self.x[i][j], self.y[i][j], self.STONE))
                                    mousecheck = False
                                    return mousecheck
                        elif self.mapstate == 2:
                            if (-self.mapX+900+self.heroX)/25-1.5 < j < (-self.mapX+self.heroX+900)/25+1.5 and (-self.mapY+900+self.heroY)/25-2 < i < (-self.mapY+900+self.heroY)/25+1.5:
                                if self.mouseX - 1 < self.x[i][j]+12.5 and self.mouseX + 1 > self.x[i][j]-12.5 and self.mouseY + 1 > self.y[i][j]-12.5 and self.mouseY - 1 < self.y[i][j]+12.5:
                                    self.tilehp_2[i][j] -= 1
                                    if self.tilehp_2[i][j] <= 0:
                                        self.mapChange[i][j] = 10
                                    mousecheck = False
                                    return mousecheck
                    if (int)(self.mapChange[i][j] / 10) == 4: #나무가 부서진다
                        if self.mapstate == 1:
                            if (-self.mapX+900+self.heroX)/25-1.5 < j < (-self.mapX+self.heroX+900)/25+1.5 and (self.heroY)/25-1.5 < i < (self.heroY)/25+1.5:
                                if self.mouseX - 1 < self.x[i][j]+12.5 and self.mouseX + 1 > self.x[i][j]-12.5 and self.mouseY + 1 > self.y[i][j]-12.5 and self.mouseY - 1 < self.y[i][j]+12.5:
                                    self.tilehp_1[i][j] -= 1
                                    if self.tilehp_1[i][j] <= 0:
                                        self.removeTree(i,j,(int)(self.mapChange[i][j] / 10))
                        elif self.mapstate == 2:
                            if (-self.mapX+900+self.heroX)/25-1.5 < j < (-self.mapX+self.heroX+900)/25+1.5 and (-self.mapY+900+self.heroY)/25-2 < i < (-self.mapY+900+self.heroY)/25+1.5:
                                if self.mouseX - 1 < self.x[i][j]+12.5 and self.mouseX + 1 > self.x[i][j]-12.5 and self.mouseY + 1 > self.y[i][j]-12.5 and self.mouseY - 1 < self.y[i][j]+12.5:
                                    self.tilehp_2[i][j] -= 1
                                    if self.tilehp_2[i][j] <= 0:
                                        self.removeTree(i,j,(int)(self.mapChange[i][j] / 10))


    def blockControl(self,mousecheck, weapon):
        if weapon == 1:
            for i in range((self.mapSizeY)):
                for j in range((72)):
                    if (int)(self.mapChange[i][j] / 10) == 1:
                        if self.mapstate == 1:
                            if (-self.mapX+900+self.heroX)/25-1.5 < j < (-self.mapX+self.heroX+900)/25+1.5 and (self.heroY)/25-1.5 < i < (self.heroY)/25+1.5:
                                if self.mouseX - 1 < self.x[i][j]+12.5 and self.mouseX + 1 > self.x[i][j]-12.5 and self.mouseY + 1 > self.y[i][j]-12.5 and self.mouseY - 1 < self.y[i][j]+12.5:
                                    self.mapChange[i][j] = 20
                        elif self.mapstate == 2:
                            if (-self.mapX+900+self.heroX)/25-1.5 < j < (-self.mapX+self.heroX+900)/25+1.5 and (-self.mapY+900+self.heroY)/25-2 < i < (-self.mapY+900+self.heroY)/25+1.5:
                                if self.mouseX - 1 < self.x[i][j]+12.5 and self.mouseX + 1 > self.x[i][j]-12.5 and self.mouseY + 1 > self.y[i][j]-12.5 and self.mouseY - 1 < self.y[i][j]+12.5:
                                    self.mapChange[i][j] = 20


    def update(self):
        global inventory
        inventory.update(self.item_kind,self.item_num,self.item_state)
        self.removeItem()
        self.inventory = inventory
        for item in items:
            item.get_hero(self.mapX,self.mapY,self.mapChange , self.mapstate , self.distance ,self.herogravity, self.herostate , self.heroTilex , self.heroTiley , self.heroX, self.heroY)
            item.update()

    def draw(self):
        for i in range(self.mapSizeY):
            for j in range(72):
                if self.showSizeX1 < j < self.showSizeX2 and self.showSizeY1 < i < self.showSizeY2-5:
                    if self.mapChange[i][j] == self.EMPTY:
                        continue

                    elif self.mapChange[i][j] == self.MUD1:
                        self.image21.draw(self.x[i][j], self.y[i][j])
                    elif self.mapChange[i][j] == self.MUD2:
                        self.image22.draw(self.x[i][j], self.y[i][j])
                    elif self.mapChange[i][j] == self.MUD3:
                        self.image23.draw(self.x[i][j], self.y[i][j])
                    elif self.mapChange[i][j] == self.MUD4:
                        self.image24.draw(self.x[i][j], self.y[i][j])
                    elif self.mapChange[i][j] == self.MUD5:
                        self.image20.draw(self.x[i][j], self.y[i][j])

                    elif self.mapChange[i][j] == 30:
                        self.randtile = random.randint(0, 3)
                        if self.randtile == 0:
                            self.image30.draw(self.x[i][j], self.y[i][j])
                        elif self.randtile == 1:
                            self.image31.draw(self.x[i][j], self.y[i][j])
                        elif self.randtile == 2:
                            self.image32.draw(self.x[i][j], self.y[i][j])
                        elif self.randtile == 3:
                            self.image33.draw(self.x[i][j], self.y[i][j])

                    elif self.mapChange[i][j] == self.TREE1:
                        self.image40.opacify(1)
                        self.image40.draw(self.x[i][j], self.y[i][j])
                    elif self.mapChange[i][j] == self.TREE2:
                        self.image41.draw(self.x[i][j], self.y[i][j])
                    elif self.mapChange[i][j] == self.TREE3:
                        self.image42.draw(self.x[i][j], self.y[i][j])

                    if self.isShowTile(i,j):
                        self.image0.opacify(0.85)
                        self.image0.draw(self.x[i][j], self.y[i][j])
        for item in items:
            item.draw()
        inventory.draw()
    def draw_bb(self):
        draw_rectangle(self.mouseX - 5 , self.mouseY - 5 , self.mouseX + 5 , self.mouseY + 5)
        for i in range(self.mapSizeY):
            for j in range(72):
                if self.mapstate == 1:
                    if (-self.mapX+900+self.heroX)/25-1.5 < j < (-self.mapX+self.heroX+900)/25+1.5 and (self.heroY)/25-1.5 < i < (self.heroY)/25+1.5:
                        if (int)(self.mapChange[i][j] / 10) == 2:
                            draw_rectangle(self.x[i][j] -12.5 , self.y[i][j] -12.5 , self.x[i][j] +12.5 , self.y[i][j] +12.5)
                elif self.mapstate == 2:
                    if (-self.mapX+900+self.heroX)/25-1.5 < j < (-self.mapX+self.heroX+900)/25+1.5 and (-self.mapY+900+self.heroY)/25-2 < i < (-self.mapY+900+self.heroY)/25+1.5:
                        if (int)(self.mapChange[i][j] / 10) == 2:
                            draw_rectangle(self.x[i][j] -12.5 , self.y[i][j] -12.5 , self.x[i][j] +12.5 , self.y[i][j] +12.5)